;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var charts, ui, utils;

charts = require("./charts");

ui = require("./ui");

utils = require("./utils");

},{"./charts":2,"./ui":3,"./utils":4}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3


},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
window.utils = {};

utils.dump = function(text) {
  var $dumper;
  $dumper = $("#dumper");
  $dumper.text(text);
  return $dumper.show();
};

utils.log = function(text) {
  var $dumper;
  $dumper = $("#dumper");
  $dumper.text("" + ($dumper.text()) + "\n" + text);
  return $dumper.show();
};

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var GraphChance, GraphPrecip, GraphTemp, Raleigh, displayWeather, formatChance, formatPrecip, formatTemp, lat, lon, start, watchWindowResizing, weather, zip;

weather = require("./us-weather");

window.ui = {};

Raleigh = {
  lat: 35.87,
  lon: -78.78,
  zip: 27511
};

lat = Raleigh.lat, lon = Raleigh.lon, zip = Raleigh.zip;

GraphTemp = GraphChance = GraphPrecip = null;

watchWindowResizing = function() {
  var fireResizingComplete, timeout;
  timeout = null;
  fireResizingComplete = function() {
    var $window, event;
    $window = $(window);
    event = new CustomEvent("window-resizing-complete", {
      detail: {
        width: $window.width(),
        height: $window.height()
      }
    });
    return window.dispatchEvent(event);
  };
  return $(window).resize(function() {
    if (timeout) {
      clearTimeout(timeout);
    }
    return timeout = setTimeout(fireResizingComplete, 500);
  });
};

watchWindowResizing();

$(window).bind("window-resizing-complete", function(event) {
  var height, width, _ref;
  _ref = event.originalEvent.detail, width = _ref.width, height = _ref.height;
  return console.log({
    width: width,
    height: height
  });
});

start = function() {
  $(".chartContainer").height($(window).innerHeight() / 2);
  $(".chartContainer").width($(window).innerWidth());
  weather.getWeatherByZip(zip, function(err, weatherData) {
    return displayWeather(weatherData);
  });
  return $(window).resize(function() {
    $(".chartContainer").height($(window).innerHeight() / 2);
    $(".chartContainer").width($(window).innerWidth());
    if (GraphTemp != null) {
      GraphTemp.render();
    }
    if (GraphChance != null) {
      GraphChance.render();
    }
    if (GraphPrecip != null) {
      return GraphPrecip.render();
    }
  });
};

displayWeather = function(weatherData) {
  var seriesChance, seriesPrecip, seriesTemp;
  utils.dump(JSON.stringify(weatherData, null, 4));
  seriesTemp = [];
  seriesPrecip = [];
  return seriesChance = [];
};

formatTemp = function(y) {
  return "" + y + " F";
};

formatPrecip = function(y) {
  return "" + y + " in";
};

formatChance = function(y) {
  return "" + y + " %";
};

$(document).ready(start);

},{"./us-weather":5}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var data2series, httpGet, weather,
  __hasProp = {}.hasOwnProperty;

weather = exports;

weather.getLocations = function(callback) {
  var url;
  url = "/api/v1/weather-locations.json";
  httpGet(url, callback);
};

weather.getWeatherByZip = function(zipcode, callback) {
  var url;
  url = "/api/v1/weather-by-zip/" + zipcode + ".json";
  httpGet(url, function(err, data) {
    if (err != null) {
      return callback(err);
    }
    return callback(null, data2series(data));
  });
};

weather.getWeatherByGeo = function(lat, lon, callback) {
  var url;
  url = "/api/v1/weather-by-geo/" + lat + "," + lon + ".json";
  httpGet(url, function(err, data) {
    if (err != null) {
      return callback(err);
    }
    return callback(null, data2series(data));
  });
};

data2series = function(data) {
  var name, newData, newSeries, oldSeries, points, time, value, _i, _len, _ref;
  oldSeries = data.data;
  delete data.data;
  newSeries = data.series = [];
  for (name in oldSeries) {
    if (!__hasProp.call(oldSeries, name)) continue;
    points = oldSeries[name];
    newData = [];
    newSeries.push({
      name: name,
      lat: data.latitude,
      lon: data.longitude,
      mtime: data.creationDate,
      data: newData
    });
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      _ref = points[_i], time = _ref[0], value = _ref[1];
      newData.push({
        x: time / 1000,
        y: value
      });
    }
  }
  return data;
};

httpGet = function(url, callback) {
  return $.ajax({
    dataType: "json",
    url: url,
    success: function(data, status, jqXHR) {
      return callback(null, data);
    },
    error: function(jqXHR, status, error) {
      var errObj;
      errObj = new Error("jQuery.ajax error: " + status);
      errObj.jqXHR = jqXHR;
      errObj.status = status;
      errObj.error = error;
      return callback(errObj);
    }
  });
};

},{}]},{},[1])
//# sourceMappingURL=index.js.map
;