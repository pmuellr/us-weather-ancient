// Generated by CoffeeScript 1.6.3
var CACHE_ENTRIES_MAX, CACHE_GC_MINS, CACHE_MAX_AGE_HRS, CORSify, Locations, PROGRAM, SWAGGER, VENDOR, WWWDIR, WeatherCache, alignRight0, cleanCache, express, getLocations, getWeatherByGeo, getWeatherByZip, handleError, http, log, logDate, logError, logRequest, lruCache, main, path, permanentRedirectWithSlash, weather;

http = require("http");

path = require("path");

express = require("express");

lruCache = require("lru-cache");

weather = require("./us-weather");

PROGRAM = "" + (path.basename(path.dirname(__dirname))) + " server";

WWWDIR = path.join(__dirname, "../www");

VENDOR = path.join(__dirname, "../vendor");

SWAGGER = path.join(__dirname, "../vendor", "swagger-ui");

CACHE_GC_MINS = 5;

CACHE_ENTRIES_MAX = 500;

CACHE_MAX_AGE_HRS = 1;

Locations = null;

WeatherCache = lruCache({
  max: CACHE_ENTRIES_MAX,
  maxAge: CACHE_MAX_AGE_HRS * 1000 * 60 * 60
});

main = function() {
  var app, favIcon, port;
  port = process.env.VCAP_APP_PORT || process.env.PORT || "3000";
  port = parseInt(port, 10);
  favIcon = path.join(WWWDIR, "images/icon-032.png");
  app = express();
  app.on('error', function(error) {
    return logError(error);
  });
  app.use(express.favicon(favIcon));
  app.use(CORSify);
  app.get("/api/v1/weather-locations.json", logRequest, getLocations);
  app.get("/api/v1/weather-by-geo/:lat,:lon.json", logRequest, getWeatherByGeo);
  app.get("/api/v1/weather-by-zip/:zip.json", logRequest, getWeatherByZip);
  app.use(express.errorHandler({
    dumpExceptions: true
  }));
  app.use(express["static"](WWWDIR));
  app.use("/vendor", express["static"](VENDOR));
  app.use("/api-ui", express["static"](SWAGGER));
  log("starting server at http://localhost:" + port);
  app.listen(port);
  return setInterval(cleanCache, CACHE_GC_MINS * 1000 * 60);
};

permanentRedirectWithSlash = function(path) {
  return function(request, response, next) {
    if (request.path !== path) {
      return next();
    }
    return response.redirect(301, "" + path + "/");
  };
};

CORSify = function(request, response, next) {
  response.header("Access-Control-Allow-Origin:", "*");
  response.header("Access-Control-Allow-Methods", "GET");
  return next();
};

logRequest = function(request, response, next) {
  log("" + request.method + " " + request.url);
  return next();
};

cleanCache = function() {
  var key, keys, val, _i, _len, _results;
  log("cleanCache()");
  keys = WeatherCache.keys();
  _results = [];
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    val = WeatherCache.get(key);
    if (val == null) {
      _results.push(log("   weather entry removed: " + key));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

getLocations = function(request, response) {
  if (Locations != null) {
    response.send(Locations);
    return;
  }
  return weather.getLocations(function(err, data) {
    if (err != null) {
      return handleError(response, err);
    }
    Locations = data;
    return response.send({
      locations: Locations
    });
  });
};

getWeatherByZip = function(request, response) {
  var key, value, zip;
  zip = request.params.zip;
  key = "" + zip;
  value = WeatherCache.get(key);
  if (value != null) {
    response.send(value);
    return;
  }
  return weather.getWeatherByZip(zip, function(err, data) {
    if (err != null) {
      return handleError(response, err);
    }
    WeatherCache.set(key, data);
    return response.send(data);
  });
};

getWeatherByGeo = function(request, response) {
  var key, lat, lon, value;
  lat = request.params.lat;
  lon = request.params.lon;
  key = "" + lat + "," + lon;
  value = WeatherCache.get(key);
  if (value != null) {
    response.send(value);
    return;
  }
  return weather.getWeatherByGeo(lat, lon, function(err, data) {
    if (err != null) {
      return handleError(response, err);
    }
    WeatherCache.set(key, data);
    return response.send(data);
  });
};

handleError = function(response, err) {
  response.send({
    error: "" + err,
    stack: "" + err.stack
  });
};

log = function(message) {
  return console.log("" + PROGRAM + ": " + (logDate()) + " " + message);
};

logError = function(error) {
  log("error: " + error);
  return log(error.stack);
};

logDate = function() {
  var date, day, hr, min, mon, ms, result, sec;
  date = new Date();
  mon = date.getMonth() + 1;
  day = date.getDate();
  hr = date.getHours();
  min = date.getMinutes();
  sec = date.getSeconds();
  ms = date.getMilliseconds();
  mon = alignRight0("" + mon, 2);
  day = alignRight0("" + day, 2);
  hr = alignRight0("" + hr, 2);
  min = alignRight0("" + min, 2);
  sec = alignRight0("" + sec, 2);
  ms = alignRight0("" + ms, 4);
  result = "" + mon + "-" + day + " " + hr + ":" + min + ":" + sec + "." + ms;
  return result;
};

alignRight0 = function(string, length) {
  while (string.length < length) {
    string = "0" + string;
  }
  return string;
};

main();
